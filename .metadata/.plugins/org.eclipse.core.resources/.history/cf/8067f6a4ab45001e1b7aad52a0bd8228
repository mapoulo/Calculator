package com.example.demo.Controllers;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.Models.User;
import com.example.demo.Services.UserService;


@Controller
public class UploadController {

	
	
     @Autowired
     private UserService userService;
	  
	  @RequestMapping("/")
	  public String index() {
		  return "index";
	  }
	  
	  @RequestMapping("/register")
	  public String openRegisterPage() {
		  return "register";
	  }
	  
	  @RequestMapping("/homepage")
	  public String openRegisterPsage() {
		  return "homepage";
	  }
	  
	  @PostMapping("/home")
	    public String login(@RequestParam String username, @RequestParam String password, Model model) {
	        
		  if(userService.isRegistered(username)) {
			  return "homepage";
		  }else {
			  model.addAttribute("message", "Not Reqistered");
			  return "homepage";
		  }    
	    }
	  
	  
	  @PostMapping("/register")
	    public String processRegistration(@RequestParam String username, @RequestParam String password, Model model) {
	        
		  userService.processRegistration(username, password);
 	      model.addAttribute("message", "Registration successful. Welcome, " + username + "!");

	        return "homepage"; 
	    }
	  
	  
	  
	  @PostMapping("/performCalculation")
	    public String performCalculation(
	            @RequestParam double operand1,
	            @RequestParam double operand2,
	            @RequestParam String operator,
	            Model model) {

	        double result = calculateResult(operand1, operand2, operator);
	        model.addAttribute("result", result);

	        return "homepage";
	    }

	    private double calculateResult(double operand1, double operand2, String operator) {
	        // Perform the calculation based on the operator
	        switch (operator) {
	            case "+":
	                return operand1 + operand2;
	            case "-":
	                return operand1 - operand2;
	            case "*":
	                return operand1 * operand2;
	            case "/":
	                if (operand2 != 0) {
	                    return operand1 / operand2;
	                } else {
	                    // Handle division by zero error
	                    return Double.NaN;
	                }
	            default:
	                // Handle unsupported operator error
	                return Double.NaN;
	        }
	    }
	  
	  
	
	  
	  


}
